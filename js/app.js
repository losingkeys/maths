// Generated by CoffeeScript 1.4.0
(function() {
  var GlobalView, MainRouter, MathMaker, ProblemView, QuestionSet, Session;

  MathMaker = (function() {

    function MathMaker(group, alreadyUsed) {
      this.group = group != null ? group : 0;
      this.alreadyUsed = alreadyUsed != null ? alreadyUsed : [];
    }

    return MathMaker;

  })();

  window.app || (window.app = {});

  MainRouter = Backbone.Router.extend({
    routes: {
      '': 'root',
      'config': 'config',
      'reset': 'reset',
      'finished': 'finished',
      'practice': 'math',
      'practice/:operation': 'math',
      'practice/:operation/:group': 'math'
    },
    root: function() {
      return console.log('root route');
    },
    math: function(operation, group) {
      if (operation == null) {
        operation = 'addition';
      }
      if (group == null) {
        group = '0';
      }
      app.session || (app.session = new app.Session());
      app.session.push(new app.QuestionSet({
        operation: operation,
        group: group
      }));
      return (new app.ProblemView()).initilize();
    },
    reset: function() {
      return console.log('resetting');
    },
    config: function() {
      return console.log('configuring');
    },
    finished: function() {
      return alert('finished');
    }
  });

  app.router = new MainRouter();

  window.app || (window.app = {});

  $(function() {
    console.log(Backbone.history.start());
    return (new app.GlobalView()).initilize();
  });

  window.app || (window.app = {});

  Session = Backbone.Collection.extend({
    operations: ['addition', 'subtraction'],
    setsPerOperation: 10,
    getLastQuestionSet: function() {
      return this.models.slice(-1)[0];
    },
    finishedWithOperation: function() {
      return this.models.length === this.setsPerOperation;
    },
    nextRound: function() {
      var group, lastQuestionSet, nextOperation, operation;
      lastQuestionSet = this.getLastQuestionSet();
      group = lastQuestionSet.get('group');
      operation = lastQuestionSet.get('operation');
      if (this.setsPerOperation === group) {
        if (operation === this.allOperations.slice(-1)[0]) {
          return app.router.navigate('finished', {
            trigger: true
          });
        } else {
          nextOperation = this.allOperations[1 + this.allOperations.indexOf(operation)];
          return app.router.navigate("practice/" + nextOperation + "/0", {
            trigger: true
          });
        }
      }
    }
  });

  app.Session = Session;

  window.app || (window.app = {});

  GlobalView = Backbone.View.extend({
    el: 'body',
    initilize: function() {
      return console.log('init global view');
    },
    events: {
      'click #config': 'renderConfig',
      'click #reset': 'nav',
      'click nav': 'nav'
    },
    renderConfig: function() {
      return console.log('rendering config page');
    },
    nav: function() {
      return console.log('navigating');
    }
  });

  window.app.GlobalView = GlobalView;

  window.app || (window.app = {});

  ProblemView = Backbone.View.extend({
    el: '#problemContainer',
    initilize: function() {
      return this.displayNextQuestion();
    },
    events: {
      'submit form': 'grade'
    },
    displayNextQuestion: function() {
      return this.render(app.session.getLastQuestionSet().getNewQuestion());
    },
    render: function(data) {
      var newProblem;
      if (data == null) {
        data = {};
      }
      newProblem = $("#problem-template-" + (_.random(0, 2))).html();
      $('#problemContainer').html(_.template(newProblem, data));
      return this;
    },
    grade: function(event) {
      var correct, lastQuestionSet;
      event.preventDefault();
      lastQuestionSet = app.session.getLastQuestionSet();
      debugger;
      correct = lastQuestionSet.answerQuestion(this.$el.find('input[name=answer]').val());
      console.log(app.session.finishedWithOperation(), lastQuestionSet.finishedWithSet());
      if (app.session.finishedWithOperation()) {
        this.undelegateEvents();
        app.session.nextRound();
      } else if (lastQuestionSet.finishedWithSet()) {
        this.undelegateEvents();
        app.router.navigate("practice/" + (lastQuestionSet.get('operation')) + "/" + (1 + Number(lastQuestionSet.get('group'))), {
          trigger: true
        });
      }
      return this.displayNextQuestion();
    }
  });

  window.app.ProblemView = ProblemView;

  window.app || (window.app = {});

  QuestionSet = Backbone.Model.extend({
    defaults: {
      operation: 'addition',
      group: '0'
    },
    currentOperand: null,
    questionsPerSet: 10,
    asked: {},
    getNewQuestion: function() {
      var operand;
      while (operand = _.random(0, this.questionsPerSet)) {
        if (!_.contains(_.keys(this.asked), "" + operand)) {
          break;
        }
      }
      this.currentOperand = operand;
      if (this.operation === 'subtraction') {
        return {
          operand0: Math.max(this.get('group'), operand),
          operand1: Math.min(this.get('group'), operand),
          operator: '-'
        };
      } else {
        if (_.random(0, 1) % 2) {
          return {
            operand0: this.get('group'),
            operand1: operand,
            operator: '+'
          };
        } else {
          return {
            operand0: operand,
            operand1: this.get('group'),
            operator: '+'
          };
        }
      }
    },
    finishedWithSet: function() {
      return _.keys(this.asked).length === this.questionsPerSet;
    },
    answerQuestion: function(submittedAnswer) {
      var correct, correctAnswer;
      correctAnswer = null;
      if (this.operation === 'addition') {
        correctAnswer = Number(this.currentOperand) + Number(this.get('group'));
      }
      if (this.operation === 'subtraction') {
        correctAnswer = Math.abs(Number(this.currentOperand) - Number(this.get('group')));
      }
      correct = correctAnswer === Number(submittedAnswer);
      this.asked["" + this.currentOperand] = {
        correct: correct,
        submittedAnswer: submittedAnswer
      };
      return correct;
    }
  });

  app.QuestionSet = QuestionSet;

}).call(this);
